#!/usr/bin/env bash

printf "[ %s: Run assembly with meraculous ]\n" \
    "$(date)"

# shellcheck disable=SC1091
source "src/sh/bash_header"
# shellcheck disable=SC1091
source "src/sh/io_parser"

# meraculous script
meraculous="bin/meraculous/run_meraculous.sh"

# make outdir
outdir="$(dirname "${output_fq}")"
if [[ ! -d "${outdir}" ]]; then
    mkdir -p "${outdir}"
fi

for meraculous_kmer_length in 21 31 67; do
    meraculous_outdir="${outdir}/run_${meraculous_kmer_length}mer"
    meraculous_conf="${outdir}/meraculous_${meraculous_kmer_length}.conf"

    # configure meraculous
    cat <<- _EOF_ > "${meraculous_conf}"
    lib_seq             $(readlink -f "${input_fq}") NOPCR 470 47 100 0 0 1 1 1 0 0 
    genome_size         0.66
    mer_size            ${meraculous_kmer_length}
    diploid_mode        1
    num_prefix_blocks   1
    min_depth_cutoff    0
    local_num_procs     40
    local_max_memory    7
    use_cluster         0
    no_read_validation  1
_EOF_

    # build command
    cmd=( "${meraculous}" -c "${meraculous_conf}"
              -restart
              -cleanup_level 2
              -dir "${meraculous_outdir}" )
    shopt -s extglob
    printf "Final command line: "
    printf "%s " "${cmd[@]//+([[:blank:]])/ }"
    printf "\n"
    shopt -u extglob

    # run meraculous
    log_file="${outdir}/meraculous_${meraculous_kmer_length}.log"
    err_file="${outdir}/meraculous_${meraculous_kmer_length}.err"

    "${cmd[@]}" > "${log_file}" 2> "${err_file}" &
done

printf "[ %s: Waiting for meraculous jobs to finish ]\n" "$(date)"
FAIL=0
fail_wait

# log metadata
metadata_file="${outdir}/METADATA.csv"

printf "[ %s: Logging metadata ]\n" "$(date)"
printf "metadata_file: %s\n" "${metadata_file}"
cat <<- _EOF_ > "${metadata_file}"
    Script,${0}
    branch,$(git rev-parse --abbrev-ref HEAD)
    hash,$(git rev-parse HEAD)
    date,$(date +%F)
    meraculous,$("${meraculous}" -v 2>&1 | sed '2q;d')
_EOF_

printf "[ %s: Done ]\n" "$(date)"

exit 0

